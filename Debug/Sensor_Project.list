
Sensor_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800492c  0800492c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004934  08004934  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08004948  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004948  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024cb  00000000  00000000  00033428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  00036928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000272a6  00000000  00000000  00037810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da0b  00000000  00000000  0005eab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efe31  00000000  00000000  0006c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c2f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b0  00000000  00000000  0015c370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048b0 	.word	0x080048b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048b0 	.word	0x080048b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <update_display>:
 *      Author: Daniel
 */

#include <Display.h>

void update_display(uint8_t data, uint8_t rs, uint8_t rw){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	460b      	mov	r3, r1
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	4613      	mov	r3, r2
 80004d8:	717b      	strb	r3, [r7, #5]

	uint8_t transmit_data[3];
	transmit_data[0] = 0x1F;
 80004da:	231f      	movs	r3, #31
 80004dc:	733b      	strb	r3, [r7, #12]
	if(rw == 1)
 80004de:	797b      	ldrb	r3, [r7, #5]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d104      	bne.n	80004ee <update_display+0x26>
		transmit_data[0] = transmit_data[0] | 0x3F;
 80004e4:	7b3b      	ldrb	r3, [r7, #12]
 80004e6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	733b      	strb	r3, [r7, #12]
	if(rs == 1)
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d104      	bne.n	80004fe <update_display+0x36>
		transmit_data[0] = transmit_data[0] | 0x5F;
 80004f4:	7b3b      	ldrb	r3, [r7, #12]
 80004f6:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	733b      	strb	r3, [r7, #12]

	transmit_data[1] = data & 0x0F;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 030f 	and.w	r3, r3, #15
 8000504:	b2db      	uxtb	r3, r3
 8000506:	737b      	strb	r3, [r7, #13]
	transmit_data[2] = (data >> 4) & 0x0F;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	091b      	lsrs	r3, r3, #4
 800050c:	b2db      	uxtb	r3, r3
 800050e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <update_display+0x78>)
 8000518:	f000 ffd4 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transmit_data, 3, HAL_MAX_DELAY);
 800051c:	f107 010c 	add.w	r1, r7, #12
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	2203      	movs	r2, #3
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <update_display+0x7c>)
 8000528:	f002 fb36 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <update_display+0x78>)
 8000534:	f000 ffc6 	bl	80014c4 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	48000400 	.word	0x48000400
 8000544:	20000028 	.word	0x20000028

08000548 <pwm_bright>:

void pwm_bright(int d){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <pwm_bright+0x34>)
 8000558:	f000 ffb4 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	4808      	ldr	r0, [pc, #32]	; (8000580 <pwm_bright+0x38>)
 8000560:	f002 fdfe 	bl	8003160 <HAL_TIM_PWM_Start>

	htim2.Instance->CCR1 = 30;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <pwm_bright+0x38>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	221e      	movs	r2, #30
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR1 = 10;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <pwm_bright+0x38>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	220a      	movs	r2, #10
 8000572:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000800 	.word	0x48000800
 8000580:	2000008c 	.word	0x2000008c

08000584 <Display_init>:

void Display_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f000 fcea 	bl	8000f64 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 ff93 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800059e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a2:	f000 fcdf 	bl	8000f64 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 ff88 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 fcd4 	bl	8000f64 <HAL_Delay>

	uint8_t func_set[3] = { 0x1f, 0x01, 0x03 };
 80005bc:	4a38      	ldr	r2, [pc, #224]	; (80006a0 <Display_init+0x11c>)
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	8019      	strh	r1, [r3, #0]
 80005c8:	3302      	adds	r3, #2
 80005ca:	0c12      	lsrs	r2, r2, #16
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t clear_disp[3] = { 0x1f, 0x01, 0x0 };
 80005ce:	4a35      	ldr	r2, [pc, #212]	; (80006a4 <Display_init+0x120>)
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	701a      	strb	r2, [r3, #0]
	uint8_t internal_div[3] = { 0x1f, 0x03, 0x01 };
 80005e0:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <Display_init+0x124>)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	8019      	strh	r1, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c12      	lsrs	r2, r2, #16
 80005f0:	701a      	strb	r2, [r3, #0]
	uint8_t contrast_set[3] = { 0x1f, 0x0f, 0x07 };
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <Display_init+0x128>)
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	8019      	strh	r1, [r3, #0]
 80005fe:	3302      	adds	r3, #2
 8000600:	0c12      	lsrs	r2, r2, #16
 8000602:	701a      	strb	r2, [r3, #0]
	uint8_t power_icon_power[3] = { 0x1f, 0x0c, 0x05 };
 8000604:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <Display_init+0x12c>)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	4611      	mov	r1, r2
 800060e:	8019      	strh	r1, [r3, #0]
 8000610:	3302      	adds	r3, #2
 8000612:	0c12      	lsrs	r2, r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
	uint8_t follower_ctrl[3] = { 0x1f, 0x0e, 0x06 };
 8000616:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <Display_init+0x130>)
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	4611      	mov	r1, r2
 8000620:	8019      	strh	r1, [r3, #0]
 8000622:	3302      	adds	r3, #2
 8000624:	0c12      	lsrs	r2, r2, #16
 8000626:	701a      	strb	r2, [r3, #0]
	uint8_t on_off[3] = { 0x1f, 0x0f, 0x0 };
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <Display_init+0x134>)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	8019      	strh	r1, [r3, #0]
 8000632:	3302      	adds	r3, #2
 8000634:	0c12      	lsrs	r2, r2, #16
 8000636:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&hspi2, func_set, 3, 100);
 8000638:	f107 011c 	add.w	r1, r7, #28
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	2203      	movs	r2, #3
 8000640:	481e      	ldr	r0, [pc, #120]	; (80006bc <Display_init+0x138>)
 8000642:	f002 faa9 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, clear_disp, 3, 100);
 8000646:	f107 0118 	add.w	r1, r7, #24
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	2203      	movs	r2, #3
 800064e:	481b      	ldr	r0, [pc, #108]	; (80006bc <Display_init+0x138>)
 8000650:	f002 faa2 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, internal_div, 3, 100);
 8000654:	f107 0114 	add.w	r1, r7, #20
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	2203      	movs	r2, #3
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <Display_init+0x138>)
 800065e:	f002 fa9b 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, contrast_set, 3, 100);
 8000662:	f107 0110 	add.w	r1, r7, #16
 8000666:	2364      	movs	r3, #100	; 0x64
 8000668:	2203      	movs	r2, #3
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <Display_init+0x138>)
 800066c:	f002 fa94 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, power_icon_power, 3, 100);
 8000670:	f107 010c 	add.w	r1, r7, #12
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	2203      	movs	r2, #3
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <Display_init+0x138>)
 800067a:	f002 fa8d 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, follower_ctrl, 3, 100);
 800067e:	f107 0108 	add.w	r1, r7, #8
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	2203      	movs	r2, #3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <Display_init+0x138>)
 8000688:	f002 fa86 	bl	8002b98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, on_off, 3, 100);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	2364      	movs	r3, #100	; 0x64
 8000690:	2203      	movs	r2, #3
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <Display_init+0x138>)
 8000694:	f002 fa80 	bl	8002b98 <HAL_SPI_Transmit>
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080048c8 	.word	0x080048c8
 80006a4:	080048cc 	.word	0x080048cc
 80006a8:	080048d0 	.word	0x080048d0
 80006ac:	080048d4 	.word	0x080048d4
 80006b0:	080048d8 	.word	0x080048d8
 80006b4:	080048dc 	.word	0x080048dc
 80006b8:	080048e0 	.word	0x080048e0
 80006bc:	20000028 	.word	0x20000028

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a40      	ldr	r2, [pc, #256]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b38      	ldr	r3, [pc, #224]	; (80007dc <MX_GPIO_Init+0x11c>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b35      	ldr	r3, [pc, #212]	; (80007dc <MX_GPIO_Init+0x11c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a34      	ldr	r2, [pc, #208]	; (80007dc <MX_GPIO_Init+0x11c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_GPIO_Init+0x11c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <MX_GPIO_Init+0x11c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <MX_GPIO_Init+0x11c>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_GPIO_Init+0x11c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|Disp_Reset_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f248 0120 	movw	r1, #32800	; 0x8020
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 fec0 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <MX_GPIO_Init+0x120>)
 800074c:	f000 feba 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000756:	4823      	ldr	r0, [pc, #140]	; (80007e4 <MX_GPIO_Init+0x124>)
 8000758:	f000 feb4 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_GPIO_Init+0x128>)
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <MX_GPIO_Init+0x124>)
 8000772:	f000 fcff 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|Disp_Reset_Pin;
 8000776:	f248 0320 	movw	r3, #32800	; 0x8020
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f000 fcef 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480c      	ldr	r0, [pc, #48]	; (80007e0 <MX_GPIO_Init+0x120>)
 80007b0:	f000 fce0 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 80007b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0x124>)
 80007ce:	f000 fcd1 	bl	8001174 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48000400 	.word	0x48000400
 80007e4:	48000800 	.word	0x48000800
 80007e8:	10210000 	.word	0x10210000

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fb40 	bl	8000e74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f80f 	bl	8000816 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f7ff ff62 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fa9e 	bl	8000d3c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000800:	f000 f886 	bl	8000910 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000804:	f000 f9d0 	bl	8000ba8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Display_init();
 8000808:	f7ff febc 	bl	8000584 <Display_init>
  test_brightness();
 800080c:	f000 f9c5 	bl	8000b9a <test_brightness>
  test_disp();
 8000810:	f000 f9a6 	bl	8000b60 <test_disp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	e7fe      	b.n	8000814 <main+0x28>

08000816 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b0b8      	sub	sp, #224	; 0xe0
 800081a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000820:	2244      	movs	r2, #68	; 0x44
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f004 f83b 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2288      	movs	r2, #136	; 0x88
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f004 f82d 	bl	80048a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000846:	2302      	movs	r3, #2
 8000848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000872:	2307      	movs	r3, #7
 8000874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fe97 	bl	80015bc <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000894:	f000 f834 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ba:	2104      	movs	r1, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fa2d 	bl	8001d1c <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008c8:	f000 f81a 	bl	8000900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fc24 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008e2:	f000 f80d 	bl	8000900 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ea:	f000 fe11 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008f4:	f000 f804 	bl	8000900 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	37e0      	adds	r7, #224	; 0xe0
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_SPI2_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_SPI2_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_SPI2_Init+0x74>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_SPI2_Init+0x74>)
 800092a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800092e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI2_Init+0x74>)
 8000932:	2202      	movs	r2, #2
 8000934:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_SPI2_Init+0x74>)
 8000938:	2201      	movs	r2, #1
 800093a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI2_Init+0x74>)
 800093e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000942:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI2_Init+0x74>)
 8000946:	2230      	movs	r2, #48	; 0x30
 8000948:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI2_Init+0x74>)
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SPI2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI2_Init+0x74>)
 800095e:	2207      	movs	r2, #7
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SPI2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_SPI2_Init+0x74>)
 8000970:	f002 f888 	bl	8002a84 <HAL_SPI_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800097a:	f7ff ffc1 	bl	8000900 <Error_Handler>
  }

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000028 	.word	0x20000028
 8000988:	40003800 	.word	0x40003800

0800098c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <HAL_SPI_MspInit+0xb4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d144      	bne.n	8000a38 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_SPI_MspInit+0xb8>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a06:	2305      	movs	r3, #5
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <HAL_SPI_MspInit+0xbc>)
 8000a12:	f000 fbaf 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <HAL_SPI_MspInit+0xc0>)
 8000a34:	f000 fb9e 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40003800 	.word	0x40003800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000400 	.word	0x48000400

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fa1c 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0x64>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0x64>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <SystemInit+0x68>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <SystemInit+0x68>)
 8000b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0x68>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0x68>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x64>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <test_disp>:
 *      Author: Daniel
 */

#include <test_display.h>

void test_disp(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

	update_display('2', 1, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	2032      	movs	r0, #50	; 0x32
 8000b6a:	f7ff fcad 	bl	80004c8 <update_display>
	update_display('3', 1, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	2033      	movs	r0, #51	; 0x33
 8000b74:	f7ff fca8 	bl	80004c8 <update_display>
	update_display(':', 1, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	203a      	movs	r0, #58	; 0x3a
 8000b7e:	f7ff fca3 	bl	80004c8 <update_display>
	update_display('5', 1, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	2035      	movs	r0, #53	; 0x35
 8000b88:	f7ff fc9e 	bl	80004c8 <update_display>
	update_display('6', 1, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2036      	movs	r0, #54	; 0x36
 8000b92:	f7ff fc99 	bl	80004c8 <update_display>

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <test_brightness>:

void test_brightness(){
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0

	pwm_bright(30);
 8000b9e:	201e      	movs	r0, #30
 8000ba0:	f7ff fcd2 	bl	8000548 <pwm_bright>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000be4:	224f      	movs	r2, #79	; 0x4f
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000bf0:	2263      	movs	r2, #99	; 0x63
 8000bf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c02:	f002 fa4c 	bl	800309e <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c0c:	f7ff fe78 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c1e:	f002 fc0f 	bl	8003440 <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c28:	f7ff fe6a 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c2e:	f002 fa61 	bl	80030f4 <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c38:	f7ff fe62 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c4c:	f003 f8e2 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c56:	f7ff fe53 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5a:	2360      	movs	r3, #96	; 0x60
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c72:	f002 facd 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c7c:	f7ff fe40 	bl	8000900 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <MX_TIM2_Init+0xe8>)
 8000c82:	f000 f825 	bl	8000cd0 <HAL_TIM_MspPostInit>

}
 8000c86:	bf00      	nop
 8000c88:	3738      	adds	r7, #56	; 0x38
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000008c 	.word	0x2000008c

08000c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca4:	d10b      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x38>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_TIM_Base_MspInit+0x38>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x38>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf0:	d11c      	bne.n	8000d2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_TIM_MspPostInit+0x64>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_TIM_MspPostInit+0x64>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_MspPostInit+0x64>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <HAL_TIM_MspPostInit+0x68>)
 8000d28:	f000 fa24 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f003 f8a4 	bl	8003ecc <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f7ff fdb9 	bl	8000900 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000cc 	.word	0x200000cc
 8000d98:	40004400 	.word	0x40004400

08000d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_UART_MspInit+0x7c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d128      	bne.n	8000e10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dee:	230c      	movs	r3, #12
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 f9b2 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e26:	e003      	b.n	8000e30 <LoopCopyDataInit>

08000e28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e2e:	3104      	adds	r1, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e38:	d3f6      	bcc.n	8000e28 <CopyDataInit>
	ldr	r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e3c:	e002      	b.n	8000e44 <LoopFillZerobss>

08000e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e40:	f842 3b04 	str.w	r3, [r2], #4

08000e44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <LoopForever+0x16>)
	cmp	r2, r3
 8000e46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e48:	d3f9      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4a:	f7ff fe53 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 fd03 	bl	8004858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e52:	f7ff fccb 	bl	80007ec <main>

08000e56 <LoopForever>:

LoopForever:
    b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e58:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e5c:	0800493c 	.word	0x0800493c
	ldr	r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e64:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e68:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e6c:	20000150 	.word	0x20000150

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_Init+0x3c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_Init+0x3c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 f93e 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f80f 	bl	8000eb4 <HAL_InitTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d002      	beq.n	8000ea2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	e001      	b.n	8000ea6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea2:	f7ff fdd5 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_InitTick+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d022      	beq.n	8000f0e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_InitTick+0x6c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_InitTick+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f93c 	bl	800115a <HAL_SYSTICK_Config>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10f      	bne.n	8000f08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d809      	bhi.n	8000f02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f000 f914 	bl	8001122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0x70>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e004      	b.n	8000f12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x20>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x1c>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2000014c 	.word	0x2000014c
 8000f48:	20000008 	.word	0x20000008

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000014c 	.word	0x2000014c

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d004      	beq.n	8000f88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_Delay+0x40>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f88:	bf00      	nop
 8000f8a:	f7ff ffdf 	bl	8000f4c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d8f7      	bhi.n	8000f8a <HAL_Delay+0x26>
  {
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff47 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff5c 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffb0 	bl	80010c8 <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e17f      	b.n	8001484 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8171 	beq.w	800147e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x38>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b12      	cmp	r3, #18
 80011aa:	d123      	bne.n	80011f4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	6939      	ldr	r1, [r7, #16]
 80011f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0203 	and.w	r2, r3, #3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d00b      	beq.n	8001248 <HAL_GPIO_Init+0xd4>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	2b11      	cmp	r3, #17
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d118      	bne.n	80012e8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012bc:	2201      	movs	r2, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	f003 0201 	and.w	r2, r3, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80ac 	beq.w	800147e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_GPIO_Init+0x32c>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	4a5d      	ldr	r2, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x32c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6613      	str	r3, [r2, #96]	; 0x60
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_GPIO_Init+0x32c>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800133e:	4a59      	ldr	r2, [pc, #356]	; (80014a4 <HAL_GPIO_Init+0x330>)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x242>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x334>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x23e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x338>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x23a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x33c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x236>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x340>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x232>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x344>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x22e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_GPIO_Init+0x348>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x22a>
 800139a:	2306      	movs	r3, #6
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 800139e:	2307      	movs	r3, #7
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x244>
 80013b6:	2300      	movs	r3, #0
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c8:	4936      	ldr	r1, [pc, #216]	; (80014a4 <HAL_GPIO_Init+0x330>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013fa:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_GPIO_Init+0x34c>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f ae78 	bne.w	8001184 <HAL_GPIO_Init+0x10>
  }
}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	48000400 	.word	0x48000400
 80014ac:	48000800 	.word	0x48000800
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	48001000 	.word	0x48001000
 80014b8:	48001400 	.word	0x48001400
 80014bc:	48001800 	.word	0x48001800
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e39d      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4ba4      	ldr	r3, [pc, #656]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4ba1      	ldr	r3, [pc, #644]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80e1 	beq.w	80017b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_RCC_OscConfig+0x4a>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	f040 8088 	bne.w	800170e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 8084 	bne.w	800170e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001606:	4b96      	ldr	r3, [pc, #600]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e375      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_RCC_OscConfig+0x7c>
 800162e:	4b8c      	ldr	r3, [pc, #560]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001636:	e005      	b.n	8001644 <HAL_RCC_OscConfig+0x88>
 8001638:	4b89      	ldr	r3, [pc, #548]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	4293      	cmp	r3, r2
 8001646:	d223      	bcs.n	8001690 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd09 	bl	8002064 <RCC_SetFlashLatencyFromMSIRange>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e356      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165c:	4b80      	ldr	r3, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a7f      	ldr	r2, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	497a      	ldr	r1, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b79      	ldr	r3, [pc, #484]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4975      	ldr	r1, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e022      	b.n	80016d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b73      	ldr	r3, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a72      	ldr	r2, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	496d      	ldr	r1, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4968      	ldr	r1, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fccc 	bl	8002064 <RCC_SetFlashLatencyFromMSIRange>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e319      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d6:	f000 fc03 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 80016da:	4601      	mov	r1, r0
 80016dc:	4b60      	ldr	r3, [pc, #384]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x2a8>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x2b0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fbda 	bl	8000eb4 <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d052      	beq.n	80017b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	e2fd      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d032      	beq.n	800177c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001716:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001722:	f7ff fc13 	bl	8000f4c <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172a:	f7ff fc0f 	bl	8000f4c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e2e6      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173c:	4b48      	ldr	r3, [pc, #288]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001748:	4b45      	ldr	r3, [pc, #276]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	493f      	ldr	r1, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	493a      	ldr	r1, [pc, #232]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
 800177a:	e01a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001788:	f7ff fbe0 	bl	8000f4c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001790:	f7ff fbdc 	bl	8000f4c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e2b3      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x1d4>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d074      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x214>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d10e      	bne.n	80017e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d10b      	bne.n	80017e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d064      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2ea>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d160      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e290      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d106      	bne.n	8001800 <HAL_RCC_OscConfig+0x244>
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0x280>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x268>
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a14      	ldr	r2, [pc, #80]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x280>
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01c      	beq.n	800187e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fb82 	bl	8000f4c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	e011      	b.n	8001870 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fb7e 	bl	8000f4c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d90a      	bls.n	8001870 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e255      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	080048e4 	.word	0x080048e4
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001870:	4bae      	ldr	r3, [pc, #696]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0e7      	beq.n	800184c <HAL_RCC_OscConfig+0x290>
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fb65 	bl	8000f4c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001886:	f7ff fb61 	bl	8000f4c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e238      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001898:	4ba4      	ldr	r3, [pc, #656]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x2ca>
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d060      	beq.n	8001976 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x30a>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	d119      	bne.n	80018f4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c6:	4b99      	ldr	r3, [pc, #612]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x322>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e215      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	498f      	ldr	r1, [pc, #572]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f2:	e040      	b.n	8001976 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d023      	beq.n	8001944 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a8a      	ldr	r2, [pc, #552]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fb20 	bl	8000f4c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff fb1c 	bl	8000f4c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1f3      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	061b      	lsls	r3, r3, #24
 800193c:	497b      	ldr	r1, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a78      	ldr	r2, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 800194a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fafc 	bl	8000f4c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff faf8 	bl	8000f4c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1cf      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03c      	beq.n	80019fc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	4a66      	ldr	r2, [pc, #408]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff fad7 	bl	8000f4c <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff fad3 	bl	8000f4c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1aa      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0ef      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3e6>
 80019c2:	e01b      	b.n	80019fc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff faba 	bl	8000f4c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fab6 	bl	8000f4c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e18d      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ef      	bne.n	80019dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a5 	beq.w	8001b54 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_OscConfig+0x574>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d118      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x574>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3a      	ldr	r2, [pc, #232]	; (8001b30 <HAL_RCC_OscConfig+0x574>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fa7d 	bl	8000f4c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fa79 	bl	8000f4c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e150      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_OscConfig+0x574>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4d2>
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	e024      	b.n	8001ad8 <HAL_RCC_OscConfig+0x51c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d110      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4fc>
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x51c>
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d016      	beq.n	8001b0e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fa34 	bl	8000f4c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fa30 	bl	8000f4c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e105      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x570>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ed      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001b0c:	e019      	b.n	8001b42 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fa1d 	bl	8000f4c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	e00e      	b.n	8001b34 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7ff fa19 	bl	8000f4c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d905      	bls.n	8001b34 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e0ee      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b34:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e9      	bne.n	8001b16 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b72      	ldr	r3, [pc, #456]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a71      	ldr	r2, [pc, #452]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80d5 	beq.w	8001d08 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	f000 808e 	beq.w	8001c82 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d15b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b69      	ldr	r3, [pc, #420]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a68      	ldr	r2, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f9e7 	bl	8000f4c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f9e3 	bl	8000f4c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0ba      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba0:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_RCC_OscConfig+0x75c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bb0:	3a01      	subs	r2, #1
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bc2:	0852      	lsrs	r2, r2, #1
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	0552      	lsls	r2, r2, #21
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	3a01      	subs	r2, #1
 8001bd2:	0652      	lsls	r2, r2, #25
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bda:	0912      	lsrs	r2, r2, #4
 8001bdc:	0452      	lsls	r2, r2, #17
 8001bde:	430a      	orrs	r2, r1
 8001be0:	494c      	ldr	r1, [pc, #304]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf2:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f9a5 	bl	8000f4c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff f9a1 	bl	8000f4c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e078      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x64a>
 8001c24:	e070      	b.n	8001d08 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c44:	f023 0303 	bic.w	r3, r3, #3
 8001c48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f977 	bl	8000f4c <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f973 	bl	8000f4c <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e04a      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x6a6>
 8001c80:	e042      	b.n	8001d08 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e03d      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_OscConfig+0x758>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d130      	bne.n	8001d04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	3b01      	subs	r3, #1
 8001cae:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d127      	bne.n	8001d04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d11f      	bne.n	8001d04 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cce:	2a07      	cmp	r2, #7
 8001cd0:	bf14      	ite	ne
 8001cd2:	2201      	movne	r2, #1
 8001cd4:	2200      	moveq	r2, #0
 8001cd6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d113      	bne.n	8001d04 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d109      	bne.n	8001d04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f99d808c 	.word	0xf99d808c

08001d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0c8      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d910      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4961      	ldr	r1, [pc, #388]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b0      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d04c      	beq.n	8001e06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d121      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e09e      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e092      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e086      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e07e      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 0203 	bic.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	493f      	ldr	r1, [pc, #252]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd6:	f7ff f8b9 	bl	8000f4c <HAL_GetTick>
 8001dda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dde:	f7ff f8b5 	bl	8000f4c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e066      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 020c 	and.w	r2, r3, #12
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d1eb      	bne.n	8001dde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	492c      	ldr	r1, [pc, #176]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4924      	ldr	r1, [pc, #144]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_RCC_ClockConfig+0x1b0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e036      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e92:	f000 f825 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e96:	4601      	mov	r1, r0
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fffc 	bl	8000eb4 <HAL_InitTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	080048e4 	.word	0x080048e4
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11e      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d133      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0xaa>
 8001f82:	e005      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f86:	617b      	str	r3, [r7, #20]
      break;
 8001f88:	e005      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8c:	617b      	str	r3, [r7, #20]
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	617b      	str	r3, [r7, #20]
      break;
 8001f94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	fb02 f203 	mul.w	r2, r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0e5b      	lsrs	r3, r3, #25
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3724      	adds	r7, #36	; 0x24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	080048fc 	.word	0x080048fc
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	007a1200 	.word	0x007a1200

08001ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002014:	4601      	mov	r1, r0
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	080048f4 	.word	0x080048f4

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800203c:	f7ff ffda 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002040:	4601      	mov	r1, r0
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0adb      	lsrs	r3, r3, #11
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	080048f4 	.word	0x080048f4

08002064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800207c:	f7ff fa3a 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002080:	6178      	str	r0, [r7, #20]
 8002082:	e014      	b.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	; 0x58
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800209c:	f7ff fa2a 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 80020a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b4:	d10b      	bne.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d919      	bls.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2ba0      	cmp	r3, #160	; 0xa0
 80020c0:	d902      	bls.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c2:	2302      	movs	r3, #2
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e013      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e010      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d902      	bls.n	80020da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020d4:	2303      	movs	r3, #3
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e00a      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d102      	bne.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e0:	2302      	movs	r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e004      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b70      	cmp	r3, #112	; 0x70
 80020ea:	d101      	bne.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 0207 	bic.w	r2, r3, #7
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	40022000 	.word	0x40022000

08002124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800212c:	2300      	movs	r3, #0
 800212e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002130:	2300      	movs	r3, #0
 8002132:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213c:	2b00      	cmp	r3, #0
 800213e:	d03f      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002148:	d01c      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800214a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214e:	d802      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002154:	e01f      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002156:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800215a:	d003      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800215c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002160:	d01c      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002162:	e018      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002164:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a84      	ldr	r2, [pc, #528]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002170:	e015      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fab9 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002182:	e00c      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3320      	adds	r3, #32
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fba0 	bl	80028d0 <RCCEx_PLLSAI2_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002194:	e003      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	74fb      	strb	r3, [r7, #19]
      break;
 800219a:	e000      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800219c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a4:	4b75      	ldr	r3, [pc, #468]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b2:	4972      	ldr	r1, [pc, #456]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021ba:	e001      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03f      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d01c      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80021d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021da:	d802      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80021e0:	e01f      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80021e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021e6:	d003      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80021e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021ec:	d01c      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80021ee:	e018      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021f0:	4b62      	ldr	r3, [pc, #392]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a61      	ldr	r2, [pc, #388]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021fc:	e015      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fa73 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220e:	e00c      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3320      	adds	r3, #32
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fb5a 	bl	80028d0 <RCCEx_PLLSAI2_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002220:	e003      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	74fb      	strb	r3, [r7, #19]
      break;
 8002226:	e000      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002230:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223e:	494f      	ldr	r1, [pc, #316]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002246:	e001      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a0 	beq.w	800239a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	4a40      	ldr	r2, [pc, #256]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	; 0x58
 8002280:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228c:	2301      	movs	r3, #1
 800228e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002290:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800229c:	f7fe fe56 	bl	8000f4c <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022a2:	e009      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a4:	f7fe fe52 	bl	8000f4c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d902      	bls.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	74fb      	strb	r3, [r7, #19]
        break;
 80022b6:	e005      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ef      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d15c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01f      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d019      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800230c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002314:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fe11 	bl	8000f4c <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232c:	e00b      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fe0d 	bl	8000f4c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d902      	bls.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	74fb      	strb	r3, [r7, #19]
            break;
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ec      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236a:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002372:	e009      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
 8002378:	e006      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002388:	7c7b      	ldrb	r3, [r7, #17]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b9e      	ldr	r3, [pc, #632]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	4a9d      	ldr	r2, [pc, #628]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a6:	4b98      	ldr	r3, [pc, #608]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f023 0203 	bic.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	4994      	ldr	r1, [pc, #592]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 020c 	bic.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	498c      	ldr	r1, [pc, #560]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ea:	4b87      	ldr	r3, [pc, #540]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4983      	ldr	r1, [pc, #524]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800240c:	4b7e      	ldr	r3, [pc, #504]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	497b      	ldr	r1, [pc, #492]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	4972      	ldr	r1, [pc, #456]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002450:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	496a      	ldr	r1, [pc, #424]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	4961      	ldr	r1, [pc, #388]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002494:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	4959      	ldr	r1, [pc, #356]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c4:	4950      	ldr	r1, [pc, #320]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d8:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	4948      	ldr	r1, [pc, #288]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	493f      	ldr	r1, [pc, #252]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d028      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252a:	4937      	ldr	r1, [pc, #220]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800253a:	d106      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253c:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002546:	60d3      	str	r3, [r2, #12]
 8002548:	e011      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002552:	d10c      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f8c8 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	491f      	ldr	r1, [pc, #124]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002598:	d106      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a4:	60d3      	str	r3, [r2, #12]
 80025a6:	e011      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f899 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02b      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f6:	d109      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a02      	ldr	r2, [pc, #8]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e014      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002614:	d10c      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f867 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d02f      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800264a:	4928      	ldr	r1, [pc, #160]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800265a:	d10d      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	2102      	movs	r1, #2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f844 	bl	80026f0 <RCCEx_PLLSAI1_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d014      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	74bb      	strb	r3, [r7, #18]
 8002676:	e011      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002680:	d10c      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3320      	adds	r3, #32
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f921 	bl	80028d0 <RCCEx_PLLSAI2_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b6:	490d      	ldr	r1, [pc, #52]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026da:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000

080026f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d018      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800270a:	4b70      	ldr	r3, [pc, #448]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d10d      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
       ||
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002722:	4b6a      	ldr	r3, [pc, #424]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
       ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d044      	beq.n	80027c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e041      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d00c      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x6e>
 8002744:	2b03      	cmp	r3, #3
 8002746:	d013      	beq.n	8002770 <RCCEx_PLLSAI1_Config+0x80>
 8002748:	2b01      	cmp	r3, #1
 800274a:	d120      	bne.n	800278e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274c:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11d      	bne.n	8002794 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e01a      	b.n	8002794 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e013      	b.n	8002798 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10f      	bne.n	800279c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278c:	e006      	b.n	800279c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      break;
 8002792:	e004      	b.n	800279e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002794:	bf00      	nop
 8002796:	e002      	b.n	800279e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002798:	bf00      	nop
 800279a:	e000      	b.n	800279e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800279c:	bf00      	nop
    }

    if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a4:	4b49      	ldr	r3, [pc, #292]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	430b      	orrs	r3, r1
 80027ba:	4944      	ldr	r1, [pc, #272]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d17d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d2:	f7fe fbbb 	bl	8000f4c <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027d8:	e009      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027da:	f7fe fbb7 	bl	8000f4c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d902      	bls.n	80027ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	73fb      	strb	r3, [r7, #15]
        break;
 80027ec:	e005      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ef      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d160      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6892      	ldr	r2, [r2, #8]
 8002816:	0211      	lsls	r1, r2, #8
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68d2      	ldr	r2, [r2, #12]
 800281c:	0912      	lsrs	r2, r2, #4
 800281e:	0452      	lsls	r2, r2, #17
 8002820:	430a      	orrs	r2, r1
 8002822:	492a      	ldr	r1, [pc, #168]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	610b      	str	r3, [r1, #16]
 8002828:	e027      	b.n	800287a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d112      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	0211      	lsls	r1, r2, #8
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	0852      	lsrs	r2, r2, #1
 8002848:	3a01      	subs	r2, #1
 800284a:	0552      	lsls	r2, r2, #21
 800284c:	430a      	orrs	r2, r1
 800284e:	491f      	ldr	r1, [pc, #124]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
 8002854:	e011      	b.n	800287a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800285e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	0211      	lsls	r1, r2, #8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6952      	ldr	r2, [r2, #20]
 800286c:	0852      	lsrs	r2, r2, #1
 800286e:	3a01      	subs	r2, #1
 8002870:	0652      	lsls	r2, r2, #25
 8002872:	430a      	orrs	r2, r1
 8002874:	4915      	ldr	r1, [pc, #84]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002880:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002884:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fb61 	bl	8000f4c <HAL_GetTick>
 800288a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288c:	e009      	b.n	80028a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800288e:	f7fe fb5d 	bl	8000f4c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	73fb      	strb	r3, [r7, #15]
          break;
 80028a0:	e005      	b.n	80028ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000

080028d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028de:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d018      	beq.n	800291c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0203 	and.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d10d      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
       ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
       ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d044      	beq.n	80029a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e041      	b.n	80029a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d00c      	beq.n	800293e <RCCEx_PLLSAI2_Config+0x6e>
 8002924:	2b03      	cmp	r3, #3
 8002926:	d013      	beq.n	8002950 <RCCEx_PLLSAI2_Config+0x80>
 8002928:	2b01      	cmp	r3, #1
 800292a:	d120      	bne.n	800296e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800292c:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11d      	bne.n	8002974 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e01a      	b.n	8002974 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e013      	b.n	8002978 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800295c:	4b48      	ldr	r3, [pc, #288]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800296c:	e006      	b.n	800297c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e004      	b.n	800297e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002974:	bf00      	nop
 8002976:	e002      	b.n	800297e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800297c:	bf00      	nop
    }

    if(status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002984:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	3b01      	subs	r3, #1
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	430b      	orrs	r3, r1
 800299a:	4939      	ldr	r1, [pc, #228]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d167      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe facb 	bl	8000f4c <HAL_GetTick>
 80029b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029b8:	e009      	b.n	80029ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029ba:	f7fe fac7 	bl	8000f4c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d902      	bls.n	80029ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	73fb      	strb	r3, [r7, #15]
        break;
 80029cc:	e005      	b.n	80029da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ef      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d14a      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d111      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	0211      	lsls	r1, r2, #8
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	0912      	lsrs	r2, r2, #4
 80029fe:	0452      	lsls	r2, r2, #17
 8002a00:	430a      	orrs	r2, r1
 8002a02:	491f      	ldr	r1, [pc, #124]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	614b      	str	r3, [r1, #20]
 8002a08:	e011      	b.n	8002a2e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	0211      	lsls	r1, r2, #8
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6912      	ldr	r2, [r2, #16]
 8002a20:	0852      	lsrs	r2, r2, #1
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0652      	lsls	r2, r2, #25
 8002a26:	430a      	orrs	r2, r1
 8002a28:	4915      	ldr	r1, [pc, #84]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fa87 	bl	8000f4c <HAL_GetTick>
 8002a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a40:	e009      	b.n	8002a56 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a42:	f7fe fa83 	bl	8000f4c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d902      	bls.n	8002a56 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	73fb      	strb	r3, [r7, #15]
          break;
 8002a54:	e005      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ef      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d106      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4903      	ldr	r1, [pc, #12]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07c      	b.n	8002b90 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fd ff6b 	bl	800098c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002acc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad6:	d902      	bls.n	8002ade <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e002      	b.n	8002ae4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002aec:	d007      	beq.n	8002afe <HAL_SPI_Init+0x7a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10b      	bne.n	8002b1e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b0e:	d903      	bls.n	8002b18 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
 8002b16:	e002      	b.n	8002b1e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f003 0204 	and.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_Transmit+0x22>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e150      	b.n	8002e5c <HAL_SPI_Transmit+0x2c4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc2:	f7fe f9c3 	bl	8000f4c <HAL_GetTick>
 8002bc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bdc:	e135      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x52>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bee:	e12c      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3a:	d107      	bne.n	8002c4c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d007      	beq.n	8002c6a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c72:	d94b      	bls.n	8002d0c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_Transmit+0xea>
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d13e      	bne.n	8002d00 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ca6:	e02b      	b.n	8002d00 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d112      	bne.n	8002cdc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cda:	e011      	b.n	8002d00 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cdc:	f7fe f936 	bl	8000f4c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d803      	bhi.n	8002cf4 <HAL_SPI_Transmit+0x15c>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d102      	bne.n	8002cfa <HAL_SPI_Transmit+0x162>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cfe:	e0a4      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ce      	bne.n	8002ca8 <HAL_SPI_Transmit+0x110>
 8002d0a:	e07c      	b.n	8002e06 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x182>
 8002d14:	8afb      	ldrh	r3, [r7, #22]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d170      	bne.n	8002dfc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d912      	bls.n	8002d4a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b02      	subs	r3, #2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d48:	e058      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d70:	e044      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d912      	bls.n	8002db0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b02      	subs	r3, #2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dae:	e025      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd6:	e011      	b.n	8002dfc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd8:	f7fe f8b8 	bl	8000f4c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d803      	bhi.n	8002df0 <HAL_SPI_Transmit+0x258>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_Transmit+0x25e>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dfa:	e026      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1b5      	bne.n	8002d72 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f901 	bl	8003012 <SPI_EndRxTxTransaction>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e000      	b.n	8002e4a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e74:	e04c      	b.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d048      	beq.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e7e:	f7fe f865 	bl	8000f4c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d902      	bls.n	8002e94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13d      	bne.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eac:	d111      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d004      	beq.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d107      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d10f      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e00f      	b.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d1a3      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f46:	e057      	b.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f4e:	d106      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x26>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d048      	beq.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f66:	f7fd fff1 	bl	8000f4c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d902      	bls.n	8002f7c <SPI_WaitFifoStateUntilTimeout+0x44>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13d      	bne.n	8002ff8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f94:	d111      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0x82>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	d004      	beq.n	8002faa <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa8:	d107      	bne.n	8002fba <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	d10f      	bne.n	8002fe4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e008      	b.n	800300a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d19f      	bne.n	8002f48 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff ff84 	bl	8002f38 <SPI_WaitFifoStateUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e027      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff07 	bl	8002e64 <SPI_WaitFlagStateUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e014      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff ff5d 	bl	8002f38 <SPI_WaitFifoStateUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e000      	b.n	8003096 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01d      	b.n	80030ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fde5 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 fa69 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01d      	b.n	8003142 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f815 	bl	800314a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fa3e 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fe28 	bl	8003dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_TIM_PWM_Start+0x98>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_TIM_PWM_Start+0x4a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_TIM_PWM_Start+0x9c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <HAL_TIM_PWM_Start+0x4a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <HAL_TIM_PWM_Start+0xa0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_TIM_PWM_Start+0x4a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_TIM_PWM_Start+0xa4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_TIM_PWM_Start+0x4a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <HAL_TIM_PWM_Start+0xa8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_Start+0x4e>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_TIM_PWM_Start+0x50>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_TIM_PWM_Start+0xac>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d00b      	beq.n	80031ee <HAL_TIM_PWM_Start+0x8e>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d007      	beq.n	80031ee <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40013400 	.word	0x40013400
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	00010007 	.word	0x00010007

08003210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e105      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x226>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b14      	cmp	r3, #20
 800323e:	f200 80f0 	bhi.w	8003422 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800329d 	.word	0x0800329d
 800324c:	08003423 	.word	0x08003423
 8003250:	08003423 	.word	0x08003423
 8003254:	08003423 	.word	0x08003423
 8003258:	080032dd 	.word	0x080032dd
 800325c:	08003423 	.word	0x08003423
 8003260:	08003423 	.word	0x08003423
 8003264:	08003423 	.word	0x08003423
 8003268:	0800331f 	.word	0x0800331f
 800326c:	08003423 	.word	0x08003423
 8003270:	08003423 	.word	0x08003423
 8003274:	08003423 	.word	0x08003423
 8003278:	0800335f 	.word	0x0800335f
 800327c:	08003423 	.word	0x08003423
 8003280:	08003423 	.word	0x08003423
 8003284:	08003423 	.word	0x08003423
 8003288:	080033a1 	.word	0x080033a1
 800328c:	08003423 	.word	0x08003423
 8003290:	08003423 	.word	0x08003423
 8003294:	08003423 	.word	0x08003423
 8003298:	080033e1 	.word	0x080033e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fa20 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]
      break;
 80032da:	e0a3      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa90 	bl	8003808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e082      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 faf9 	bl	800391c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
      break;
 800335c:	e062      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fb61 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
      break;
 800339e:	e041      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fbaa 	bl	8003b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033de:	e021      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fbee 	bl	8003bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003422:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop

08003440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIM_ConfigClockSource+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e0a8      	b.n	80035aa <HAL_TIM_ConfigClockSource+0x16a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d067      	beq.n	8003564 <HAL_TIM_ConfigClockSource+0x124>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d80b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x70>
 8003498:	2b10      	cmp	r3, #16
 800349a:	d073      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x144>
 800349c:	2b10      	cmp	r3, #16
 800349e:	d802      	bhi.n	80034a6 <HAL_TIM_ConfigClockSource+0x66>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d06f      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034a4:	e078      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d06c      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x144>
 80034aa:	2b30      	cmp	r3, #48	; 0x30
 80034ac:	d06a      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80034ae:	e073      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d00d      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0x90>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d804      	bhi.n	80034c2 <HAL_TIM_ConfigClockSource+0x82>
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d033      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0xe4>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d041      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80034c0:	e06a      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d066      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x156>
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d017      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80034ce:	e063      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f000 fc52 	bl	8003d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
      break;
 80034fc:	e04c      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f000 fc3b 	bl	8003d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003520:	609a      	str	r2, [r3, #8]
      break;
 8003522:	e039      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	461a      	mov	r2, r3
 8003532:	f000 fbaf 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2150      	movs	r1, #80	; 0x50
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fc08 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003542:	e029      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	461a      	mov	r2, r3
 8003552:	f000 fbce 	bl	8003cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2160      	movs	r1, #96	; 0x60
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fbf8 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003562:	e019      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	f000 fb8f 	bl	8003c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2140      	movs	r1, #64	; 0x40
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fbe8 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003582:	e009      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 fbdf 	bl	8003d52 <TIM_ITRx_SetConfig>
      break;
 8003594:	e000      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d00f      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3d      	ldr	r2, [pc, #244]	; (80036cc <TIM_Base_SetConfig+0x118>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3c      	ldr	r2, [pc, #240]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d01b      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2c      	ldr	r2, [pc, #176]	; (80036cc <TIM_Base_SetConfig+0x118>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d017      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <TIM_Base_SetConfig+0x128>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <TIM_Base_SetConfig+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <TIM_Base_SetConfig+0x130>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <TIM_Base_SetConfig+0x128>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <TIM_Base_SetConfig+0x12c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <TIM_Base_SetConfig+0x130>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <TIM_OC1_SetConfig+0x10c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00f      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <TIM_OC1_SetConfig+0x110>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <TIM_OC1_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a29      	ldr	r2, [pc, #164]	; (8003800 <TIM_OC1_SetConfig+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <TIM_OC1_SetConfig+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <TIM_OC1_SetConfig+0x10c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <TIM_OC1_SetConfig+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <TIM_OC1_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <TIM_OC1_SetConfig+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_OC1_SetConfig+0xc2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <TIM_OC1_SetConfig+0x11c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d111      	bne.n	80037ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40013400 	.word	0x40013400
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0210 	bic.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0320 	bic.w	r3, r3, #32
 8003856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a28      	ldr	r2, [pc, #160]	; (8003908 <TIM_OC2_SetConfig+0x100>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC2_SetConfig+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <TIM_OC2_SetConfig+0x104>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10d      	bne.n	8003890 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <TIM_OC2_SetConfig+0x100>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <TIM_OC2_SetConfig+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <TIM_OC2_SetConfig+0x108>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <TIM_OC2_SetConfig+0x10c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC2_SetConfig+0xb0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <TIM_OC2_SetConfig+0x110>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d113      	bne.n	80038e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400
 8003910:	40014000 	.word	0x40014000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0303 	bic.w	r3, r3, #3
 8003956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <TIM_OC3_SetConfig+0xfc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC3_SetConfig+0x6a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <TIM_OC3_SetConfig+0x100>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <TIM_OC3_SetConfig+0xfc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <TIM_OC3_SetConfig+0x100>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <TIM_OC3_SetConfig+0x104>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <TIM_OC3_SetConfig+0x108>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_OC3_SetConfig+0xae>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <TIM_OC3_SetConfig+0x10c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d113      	bne.n	80039f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	031b      	lsls	r3, r3, #12
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a18      	ldr	r2, [pc, #96]	; (8003aec <TIM_OC4_SetConfig+0xc0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00f      	beq.n	8003ab0 <TIM_OC4_SetConfig+0x84>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <TIM_OC4_SetConfig+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00b      	beq.n	8003ab0 <TIM_OC4_SetConfig+0x84>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <TIM_OC4_SetConfig+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <TIM_OC4_SetConfig+0x84>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <TIM_OC4_SetConfig+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d003      	beq.n	8003ab0 <TIM_OC4_SetConfig+0x84>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a14      	ldr	r2, [pc, #80]	; (8003afc <TIM_OC4_SetConfig+0xd0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40013400 	.word	0x40013400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <TIM_OC5_SetConfig+0xb4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <TIM_OC5_SetConfig+0x7a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <TIM_OC5_SetConfig+0xb8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_OC5_SetConfig+0x7a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <TIM_OC5_SetConfig+0xbc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_OC5_SetConfig+0x7a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <TIM_OC5_SetConfig+0xc0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_OC5_SetConfig+0x7a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <TIM_OC5_SetConfig+0xc4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d109      	bne.n	8003b8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	051b      	lsls	r3, r3, #20
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <TIM_OC6_SetConfig+0xb8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00f      	beq.n	8003c44 <TIM_OC6_SetConfig+0x7c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <TIM_OC6_SetConfig+0xbc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00b      	beq.n	8003c44 <TIM_OC6_SetConfig+0x7c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <TIM_OC6_SetConfig+0xc0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_OC6_SetConfig+0x7c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <TIM_OC6_SetConfig+0xc4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC6_SetConfig+0x7c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC6_SetConfig+0xc8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	029b      	lsls	r3, r3, #10
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40013400 	.word	0x40013400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800

08003c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 030a 	bic.w	r3, r3, #10
 8003cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0210 	bic.w	r2, r3, #16
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	031b      	lsls	r3, r3, #12
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 0307 	orr.w	r3, r3, #7
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	609a      	str	r2, [r3, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e045      	b.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40013400 	.word	0x40013400

08003ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e040      	b.n	8003f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fc ff54 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f82c 	bl	8003f68 <UART_SetConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e022      	b.n	8003f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fb68 	bl	80045f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fbef 	bl	800473c <UART_CheckIdleState>
 8003f5e:	4603      	mov	r3, r0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4bac      	ldr	r3, [pc, #688]	; (8004250 <UART_SetConfig+0x2e8>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	69f9      	ldr	r1, [r7, #28]
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4aa2      	ldr	r2, [pc, #648]	; (8004254 <UART_SetConfig+0x2ec>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a99      	ldr	r2, [pc, #612]	; (8004258 <UART_SetConfig+0x2f0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d121      	bne.n	800403c <UART_SetConfig+0xd4>
 8003ff8:	4b98      	ldr	r3, [pc, #608]	; (800425c <UART_SetConfig+0x2f4>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b03      	cmp	r3, #3
 8004004:	d816      	bhi.n	8004034 <UART_SetConfig+0xcc>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <UART_SetConfig+0xa4>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	0800401d 	.word	0x0800401d
 8004010:	08004029 	.word	0x08004029
 8004014:	08004023 	.word	0x08004023
 8004018:	0800402f 	.word	0x0800402f
 800401c:	2301      	movs	r3, #1
 800401e:	76fb      	strb	r3, [r7, #27]
 8004020:	e0e8      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004022:	2302      	movs	r3, #2
 8004024:	76fb      	strb	r3, [r7, #27]
 8004026:	e0e5      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004028:	2304      	movs	r3, #4
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e0e2      	b.n	80041f4 <UART_SetConfig+0x28c>
 800402e:	2308      	movs	r3, #8
 8004030:	76fb      	strb	r3, [r7, #27]
 8004032:	e0df      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004034:	2310      	movs	r3, #16
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	bf00      	nop
 800403a:	e0db      	b.n	80041f4 <UART_SetConfig+0x28c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a87      	ldr	r2, [pc, #540]	; (8004260 <UART_SetConfig+0x2f8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d134      	bne.n	80040b0 <UART_SetConfig+0x148>
 8004046:	4b85      	ldr	r3, [pc, #532]	; (800425c <UART_SetConfig+0x2f4>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d829      	bhi.n	80040a8 <UART_SetConfig+0x140>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0xf4>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004091 	.word	0x08004091
 8004060:	080040a9 	.word	0x080040a9
 8004064:	080040a9 	.word	0x080040a9
 8004068:	080040a9 	.word	0x080040a9
 800406c:	0800409d 	.word	0x0800409d
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040a9 	.word	0x080040a9
 800407c:	08004097 	.word	0x08004097
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040a9 	.word	0x080040a9
 800408c:	080040a3 	.word	0x080040a3
 8004090:	2300      	movs	r3, #0
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e0ae      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004096:	2302      	movs	r3, #2
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e0ab      	b.n	80041f4 <UART_SetConfig+0x28c>
 800409c:	2304      	movs	r3, #4
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e0a8      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040a2:	2308      	movs	r3, #8
 80040a4:	76fb      	strb	r3, [r7, #27]
 80040a6:	e0a5      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040a8:	2310      	movs	r3, #16
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	bf00      	nop
 80040ae:	e0a1      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <UART_SetConfig+0x2fc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d120      	bne.n	80040fc <UART_SetConfig+0x194>
 80040ba:	4b68      	ldr	r3, [pc, #416]	; (800425c <UART_SetConfig+0x2f4>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d00f      	beq.n	80040e8 <UART_SetConfig+0x180>
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d802      	bhi.n	80040d2 <UART_SetConfig+0x16a>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <UART_SetConfig+0x174>
 80040d0:	e010      	b.n	80040f4 <UART_SetConfig+0x18c>
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d005      	beq.n	80040e2 <UART_SetConfig+0x17a>
 80040d6:	2b30      	cmp	r3, #48	; 0x30
 80040d8:	d009      	beq.n	80040ee <UART_SetConfig+0x186>
 80040da:	e00b      	b.n	80040f4 <UART_SetConfig+0x18c>
 80040dc:	2300      	movs	r3, #0
 80040de:	76fb      	strb	r3, [r7, #27]
 80040e0:	e088      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040e2:	2302      	movs	r3, #2
 80040e4:	76fb      	strb	r3, [r7, #27]
 80040e6:	e085      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040e8:	2304      	movs	r3, #4
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	e082      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040ee:	2308      	movs	r3, #8
 80040f0:	76fb      	strb	r3, [r7, #27]
 80040f2:	e07f      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040f4:	2310      	movs	r3, #16
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	bf00      	nop
 80040fa:	e07b      	b.n	80041f4 <UART_SetConfig+0x28c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a59      	ldr	r2, [pc, #356]	; (8004268 <UART_SetConfig+0x300>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d120      	bne.n	8004148 <UART_SetConfig+0x1e0>
 8004106:	4b55      	ldr	r3, [pc, #340]	; (800425c <UART_SetConfig+0x2f4>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d00f      	beq.n	8004134 <UART_SetConfig+0x1cc>
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d802      	bhi.n	800411e <UART_SetConfig+0x1b6>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <UART_SetConfig+0x1c0>
 800411c:	e010      	b.n	8004140 <UART_SetConfig+0x1d8>
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d005      	beq.n	800412e <UART_SetConfig+0x1c6>
 8004122:	2bc0      	cmp	r3, #192	; 0xc0
 8004124:	d009      	beq.n	800413a <UART_SetConfig+0x1d2>
 8004126:	e00b      	b.n	8004140 <UART_SetConfig+0x1d8>
 8004128:	2300      	movs	r3, #0
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e062      	b.n	80041f4 <UART_SetConfig+0x28c>
 800412e:	2302      	movs	r3, #2
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e05f      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004134:	2304      	movs	r3, #4
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e05c      	b.n	80041f4 <UART_SetConfig+0x28c>
 800413a:	2308      	movs	r3, #8
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e059      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004140:	2310      	movs	r3, #16
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	bf00      	nop
 8004146:	e055      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a47      	ldr	r2, [pc, #284]	; (800426c <UART_SetConfig+0x304>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d124      	bne.n	800419c <UART_SetConfig+0x234>
 8004152:	4b42      	ldr	r3, [pc, #264]	; (800425c <UART_SetConfig+0x2f4>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004160:	d012      	beq.n	8004188 <UART_SetConfig+0x220>
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d802      	bhi.n	800416e <UART_SetConfig+0x206>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <UART_SetConfig+0x214>
 800416c:	e012      	b.n	8004194 <UART_SetConfig+0x22c>
 800416e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004172:	d006      	beq.n	8004182 <UART_SetConfig+0x21a>
 8004174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004178:	d009      	beq.n	800418e <UART_SetConfig+0x226>
 800417a:	e00b      	b.n	8004194 <UART_SetConfig+0x22c>
 800417c:	2300      	movs	r3, #0
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	e038      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004182:	2302      	movs	r3, #2
 8004184:	76fb      	strb	r3, [r7, #27]
 8004186:	e035      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004188:	2304      	movs	r3, #4
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	e032      	b.n	80041f4 <UART_SetConfig+0x28c>
 800418e:	2308      	movs	r3, #8
 8004190:	76fb      	strb	r3, [r7, #27]
 8004192:	e02f      	b.n	80041f4 <UART_SetConfig+0x28c>
 8004194:	2310      	movs	r3, #16
 8004196:	76fb      	strb	r3, [r7, #27]
 8004198:	bf00      	nop
 800419a:	e02b      	b.n	80041f4 <UART_SetConfig+0x28c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2c      	ldr	r2, [pc, #176]	; (8004254 <UART_SetConfig+0x2ec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d124      	bne.n	80041f0 <UART_SetConfig+0x288>
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <UART_SetConfig+0x2f4>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b4:	d012      	beq.n	80041dc <UART_SetConfig+0x274>
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d802      	bhi.n	80041c2 <UART_SetConfig+0x25a>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <UART_SetConfig+0x268>
 80041c0:	e012      	b.n	80041e8 <UART_SetConfig+0x280>
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c6:	d006      	beq.n	80041d6 <UART_SetConfig+0x26e>
 80041c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041cc:	d009      	beq.n	80041e2 <UART_SetConfig+0x27a>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x280>
 80041d0:	2300      	movs	r3, #0
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e00e      	b.n	80041f4 <UART_SetConfig+0x28c>
 80041d6:	2302      	movs	r3, #2
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e00b      	b.n	80041f4 <UART_SetConfig+0x28c>
 80041dc:	2304      	movs	r3, #4
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e008      	b.n	80041f4 <UART_SetConfig+0x28c>
 80041e2:	2308      	movs	r3, #8
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e005      	b.n	80041f4 <UART_SetConfig+0x28c>
 80041e8:	2310      	movs	r3, #16
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	bf00      	nop
 80041ee:	e001      	b.n	80041f4 <UART_SetConfig+0x28c>
 80041f0:	2310      	movs	r3, #16
 80041f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <UART_SetConfig+0x2ec>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	f040 80fa 	bne.w	80043f4 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004200:	7efb      	ldrb	r3, [r7, #27]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d836      	bhi.n	8004274 <UART_SetConfig+0x30c>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x2a4>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004231 	.word	0x08004231
 8004210:	08004275 	.word	0x08004275
 8004214:	08004239 	.word	0x08004239
 8004218:	08004275 	.word	0x08004275
 800421c:	0800423f 	.word	0x0800423f
 8004220:	08004275 	.word	0x08004275
 8004224:	08004275 	.word	0x08004275
 8004228:	08004275 	.word	0x08004275
 800422c:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004230:	f7fd feec 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8004234:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004236:	e020      	b.n	800427a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <UART_SetConfig+0x308>)
 800423a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800423c:	e01d      	b.n	800427a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800423e:	f7fd fe4f 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8004242:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004244:	e019      	b.n	800427a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800424c:	e015      	b.n	800427a <UART_SetConfig+0x312>
 800424e:	bf00      	nop
 8004250:	efff69f3 	.word	0xefff69f3
 8004254:	40008000 	.word	0x40008000
 8004258:	40013800 	.word	0x40013800
 800425c:	40021000 	.word	0x40021000
 8004260:	40004400 	.word	0x40004400
 8004264:	40004800 	.word	0x40004800
 8004268:	40004c00 	.word	0x40004c00
 800426c:	40005000 	.word	0x40005000
 8004270:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	74fb      	strb	r3, [r7, #19]
        break;
 8004278:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 81ac 	beq.w	80045da <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	429a      	cmp	r2, r3
 8004290:	d305      	bcc.n	800429e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d902      	bls.n	80042a4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	74fb      	strb	r3, [r7, #19]
 80042a2:	e19a      	b.n	80045da <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	f200 8091 	bhi.w	80043ce <UART_SetConfig+0x466>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x34c>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080043cf 	.word	0x080043cf
 80042bc:	08004325 	.word	0x08004325
 80042c0:	080043cf 	.word	0x080043cf
 80042c4:	08004359 	.word	0x08004359
 80042c8:	080043cf 	.word	0x080043cf
 80042cc:	080043cf 	.word	0x080043cf
 80042d0:	080043cf 	.word	0x080043cf
 80042d4:	080043a5 	.word	0x080043a5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042d8:	f7fd fe98 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80042dc:	4603      	mov	r3, r0
 80042de:	4619      	mov	r1, r3
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0214      	lsls	r4, r2, #8
 80042ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042f2:	020b      	lsls	r3, r1, #8
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6852      	ldr	r2, [r2, #4]
 80042f8:	0852      	lsrs	r2, r2, #1
 80042fa:	4611      	mov	r1, r2
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	eb13 0b01 	adds.w	fp, r3, r1
 8004304:	eb44 0c02 	adc.w	ip, r4, r2
 8004308:	4658      	mov	r0, fp
 800430a:	4661      	mov	r1, ip
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ff56 	bl	80001c8 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004322:	e057      	b.n	80043d4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	49b1      	ldr	r1, [pc, #708]	; (80045f4 <UART_SetConfig+0x68c>)
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	eb13 0b01 	adds.w	fp, r3, r1
 8004338:	eb44 0c02 	adc.w	ip, r4, r2
 800433c:	4658      	mov	r0, fp
 800433e:	4661      	mov	r1, ip
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	461a      	mov	r2, r3
 800434a:	4623      	mov	r3, r4
 800434c:	f7fb ff3c 	bl	80001c8 <__aeabi_uldivmod>
 8004350:	4603      	mov	r3, r0
 8004352:	460c      	mov	r4, r1
 8004354:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004356:	e03d      	b.n	80043d4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004358:	f7fd fdc2 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800435c:	4603      	mov	r3, r0
 800435e:	4619      	mov	r1, r3
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f04f 0400 	mov.w	r4, #0
 800436c:	0214      	lsls	r4, r2, #8
 800436e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004372:	020b      	lsls	r3, r1, #8
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6852      	ldr	r2, [r2, #4]
 8004378:	0852      	lsrs	r2, r2, #1
 800437a:	4611      	mov	r1, r2
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	eb13 0b01 	adds.w	fp, r3, r1
 8004384:	eb44 0c02 	adc.w	ip, r4, r2
 8004388:	4658      	mov	r0, fp
 800438a:	4661      	mov	r1, ip
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	461a      	mov	r2, r3
 8004396:	4623      	mov	r3, r4
 8004398:	f7fb ff16 	bl	80001c8 <__aeabi_uldivmod>
 800439c:	4603      	mov	r3, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043a2:	e017      	b.n	80043d4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	f04f 0400 	mov.w	r4, #0
 80043ae:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80043b2:	f144 0100 	adc.w	r1, r4, #0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	461a      	mov	r2, r3
 80043c0:	4623      	mov	r3, r4
 80043c2:	f7fb ff01 	bl	80001c8 <__aeabi_uldivmod>
 80043c6:	4603      	mov	r3, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043cc:	e002      	b.n	80043d4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	74fb      	strb	r3, [r7, #19]
            break;
 80043d2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d308      	bcc.n	80043ee <UART_SetConfig+0x486>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e2:	d204      	bcs.n	80043ee <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	e0f5      	b.n	80045da <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
 80043f2:	e0f2      	b.n	80045da <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fc:	d17f      	bne.n	80044fe <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80043fe:	7efb      	ldrb	r3, [r7, #27]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d85c      	bhi.n	80044be <UART_SetConfig+0x556>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x4a4>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004431 	.word	0x08004431
 8004410:	0800444f 	.word	0x0800444f
 8004414:	0800446d 	.word	0x0800446d
 8004418:	080044bf 	.word	0x080044bf
 800441c:	08004489 	.word	0x08004489
 8004420:	080044bf 	.word	0x080044bf
 8004424:	080044bf 	.word	0x080044bf
 8004428:	080044bf 	.word	0x080044bf
 800442c:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004430:	f7fd fdec 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8004434:	4603      	mov	r3, r0
 8004436:	005a      	lsls	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	441a      	add	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	b29b      	uxth	r3, r3
 800444a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800444c:	e03a      	b.n	80044c4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800444e:	f7fd fdf3 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8004452:	4603      	mov	r3, r0
 8004454:	005a      	lsls	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800446a:	e02b      	b.n	80044c4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004476:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6852      	ldr	r2, [r2, #4]
 800447e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004486:	e01d      	b.n	80044c4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004488:	f7fd fd2a 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800448c:	4603      	mov	r3, r0
 800448e:	005a      	lsls	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044a4:	e00e      	b.n	80044c4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044bc:	e002      	b.n	80044c4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	74fb      	strb	r3, [r7, #19]
        break;
 80044c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d916      	bls.n	80044f8 <UART_SetConfig+0x590>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d212      	bcs.n	80044f8 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f023 030f 	bic.w	r3, r3, #15
 80044da:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	897b      	ldrh	r3, [r7, #10]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	897a      	ldrh	r2, [r7, #10]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	e070      	b.n	80045da <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	74fb      	strb	r3, [r7, #19]
 80044fc:	e06d      	b.n	80045da <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80044fe:	7efb      	ldrb	r3, [r7, #27]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d859      	bhi.n	80045b8 <UART_SetConfig+0x650>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x5a4>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004531 	.word	0x08004531
 8004510:	0800454d 	.word	0x0800454d
 8004514:	08004569 	.word	0x08004569
 8004518:	080045b9 	.word	0x080045b9
 800451c:	08004585 	.word	0x08004585
 8004520:	080045b9 	.word	0x080045b9
 8004524:	080045b9 	.word	0x080045b9
 8004528:	080045b9 	.word	0x080045b9
 800452c:	080045a1 	.word	0x080045a1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004530:	f7fd fd6c 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	b29b      	uxth	r3, r3
 8004548:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800454a:	e038      	b.n	80045be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800454c:	f7fd fd74 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8004550:	4602      	mov	r2, r0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	b29b      	uxth	r3, r3
 8004564:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004566:	e02a      	b.n	80045be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004572:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6852      	ldr	r2, [r2, #4]
 800457a:	fbb3 f3f2 	udiv	r3, r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004582:	e01c      	b.n	80045be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004584:	f7fd fcac 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800459e:	e00e      	b.n	80045be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045b6:	e002      	b.n	80045be <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	74fb      	strb	r3, [r7, #19]
        break;
 80045bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d908      	bls.n	80045d6 <UART_SetConfig+0x66e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ca:	d204      	bcs.n	80045d6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	e001      	b.n	80045da <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	f4240000 	.word	0xf4240000

080045f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f6:	d10a      	bne.n	800470e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800474a:	f7fc fbff 	bl	8000f4c <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b08      	cmp	r3, #8
 800475c:	d10e      	bne.n	800477c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f82a 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e020      	b.n	80047be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d10e      	bne.n	80047a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f814 	bl	80047c6 <UART_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e00a      	b.n	80047be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	4613      	mov	r3, r2
 80047d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d6:	e02a      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d026      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fc fbb4 	bl	8000f4c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11b      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004804:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d0c5      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <__libc_init_array>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4e0d      	ldr	r6, [pc, #52]	; (8004890 <__libc_init_array+0x38>)
 800485c:	4c0d      	ldr	r4, [pc, #52]	; (8004894 <__libc_init_array+0x3c>)
 800485e:	1ba4      	subs	r4, r4, r6
 8004860:	10a4      	asrs	r4, r4, #2
 8004862:	2500      	movs	r5, #0
 8004864:	42a5      	cmp	r5, r4
 8004866:	d109      	bne.n	800487c <__libc_init_array+0x24>
 8004868:	4e0b      	ldr	r6, [pc, #44]	; (8004898 <__libc_init_array+0x40>)
 800486a:	4c0c      	ldr	r4, [pc, #48]	; (800489c <__libc_init_array+0x44>)
 800486c:	f000 f820 	bl	80048b0 <_init>
 8004870:	1ba4      	subs	r4, r4, r6
 8004872:	10a4      	asrs	r4, r4, #2
 8004874:	2500      	movs	r5, #0
 8004876:	42a5      	cmp	r5, r4
 8004878:	d105      	bne.n	8004886 <__libc_init_array+0x2e>
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004880:	4798      	blx	r3
 8004882:	3501      	adds	r5, #1
 8004884:	e7ee      	b.n	8004864 <__libc_init_array+0xc>
 8004886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488a:	4798      	blx	r3
 800488c:	3501      	adds	r5, #1
 800488e:	e7f2      	b.n	8004876 <__libc_init_array+0x1e>
 8004890:	08004934 	.word	0x08004934
 8004894:	08004934 	.word	0x08004934
 8004898:	08004934 	.word	0x08004934
 800489c:	08004938 	.word	0x08004938

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
